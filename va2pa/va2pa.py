# generated by chatgpt

import os
import struct

def get_physical_address(pid, virtual_address):
    # Open the maps and pagemap files for the given PID
    with open(f"/proc/{pid}/maps", "r") as maps, open(f"/proc/{pid}/pagemap", "rb") as pagemap:
        for line in maps:
            parts = line.split()
            if len(parts) >= 6:
                address_range = parts[0].split("-")
                start_addr = int(address_range[0], 16)
                end_addr = int(address_range[1], 16)

                # Check if the virtual address is in this range
                if start_addr <= virtual_address < end_addr:
                    # Calculate the offset in the pagemap file
                    page_size = os.sysconf("SC_PAGE_SIZE")
                    offset = (virtual_address // page_size) * 8
                    pagemap.seek(offset)

                    # Read the 8 bytes at this offset
                    data = pagemap.read(8)
                    if not data:
                        return None

                    # Convert it to a long integer
                    entry = struct.unpack("Q", data)[0]

                    # Check the "page present" flag
                    if entry & (1 << 63):
                        # Calculate the physical address
                        phys_addr = (entry & ((1 << 55) - 1)) * page_size
                        phys_addr += virtual_address % page_size
                        return phys_addr
    return None

# Example usage
pid = input("Enter the PID of the process: ")
virtual_addr = int(input("Enter the virtual address (in hexadecimal): "), 16)
physical_addr = get_physical_address(pid, virtual_addr)
print(f"Physical Address: {physical_addr:x}" if physical_addr is not None else "Address not found or invalid.")
